name: 'Create macOS Application'
description: 'Create and Sign macOS Application Using PyInstaller'
inputs:
  version:
    description: 'Gaphor version number'
    required: true
  base64_encoded_p12:
    description: 'base64_encoded_p12'
    required: true
  certpassword_p12:
    description: 'certpassword_p12'
    required: true
  notary_username:
    description: 'Username for notarizing'
    required: true
  notary_password:
    description: 'Password for notarizing'
    required: true
  notary_team_id:
    description: 'Team ID for notarizing'
    required: true
  sign_app:
    description: 'Build is performed on the main line'
    required: true
outputs:
  artifact:
    description: 'Build artifact'
    value: ${{ steps.dmg.outputs.artifact }}${{ steps.zip.outputs.artifact }}
runs:
  using: composite
  steps:
    - name: Install Build Dependencies
      run: poetry install --only main,packaging --no-interaction
      shell: bash
    - name: Build Wheel
      run: poetry build
      shell: bash
    - name: Create Unsigned macOS Application
      if: inputs.sign_app != 'true'
      run: poetry run poe package
      shell: bash
    - name: Import codesign certificate
      if: inputs.sign_app == 'true'
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ inputs.base64_encoded_p12 }}
        p12-password: ${{ inputs.certpassword_p12 }}
    - name: Create Signed macOS Application
      if: inputs.sign_app == 'true'
      env:
        CODESIGN_IDENTITY: "Developer ID Application: Daniel Yeaw (Z7V37BLNR9)"
      run: poetry run poe package
      shell: bash
    - name: Store notary credentials
      if: inputs.sign_app == 'true'
      run: >
        xcrun notarytool store-credentials "notarytool-profile"
        --apple-id "${{ inputs.notary_username }}"
        --team-id "${{ inputs.notary_team_id }}"
        --password "${{ inputs.notary_password }}"
      shell: bash
    - name: Notarize app
      if: inputs.sign_app == 'true'
      env:
        PRODUCT_PATH: "_packaging/dist/Gaphor.app"
      run: |
        ditto -c -k --keepParent "${{ env.PRODUCT_PATH }}" "notarization.zip"
        xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
      shell: bash
    - name: Staple app
      if: inputs.sign_app == 'true'
      env:
        PRODUCT_PATH: "_packaging/dist/Gaphor.app"
      run: xcrun stapler staple ${{ env.PRODUCT_PATH }}
      shell: bash
    - name: Create dmg
      id: dmg
      run: |
        cd _packaging
        create-dmg --volname "Gaphor ${{ inputs.version }}" \
        --background "macos/background.png" \
        --window-pos 200 120 --window-size 700 400 --icon-size 100 \
        --icon "Gaphor.app" 200 240 --hide-extension "Gaphor.app" \
        --app-drop-link 500 240 "dist/Gaphor-${{ inputs.version }}.dmg" \
        "dist/Gaphor.app"
        echo "artifact=Gaphor-${{ inputs.version }}.dmg" >> $GITHUB_OUTPUT
      shell: bash
    - name: Notarize dmg
      if: inputs.sign_app == 'true'
      env:
        PRODUCT_PATH: "_packaging/dist/Gaphor-${{ inputs.version }}.dmg"
      run: |
        ditto -c -k --keepParent "${{ env.PRODUCT_PATH }}" "notarization.zip"
        xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
      shell: bash
    - name: Staple .dmg
      if: inputs.sign_app == 'true'
      env:
        PRODUCT_PATH: "_packaging/dist/Gaphor-${{ inputs.version }}.dmg"
      run: xcrun stapler staple ${{ env.PRODUCT_PATH }}
      shell: bash
    - name: Upload Gaphor-${{ inputs.version }}.dmg
      uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
      with:
        name: Gaphor-${{ inputs.version }}.dmg
        path: _packaging/dist/Gaphor-${{ inputs.version }}.dmg
    - name: Upload Assets (release only)
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release upload ${{ inputs.version }} "_packaging/dist/Gaphor-${{ inputs.version }}.dmg"
      shell: bash
